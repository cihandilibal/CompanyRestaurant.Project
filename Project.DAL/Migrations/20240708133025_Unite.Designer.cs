// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Project.DAL.ContextClasses;

#nullable disable

namespace Project.DAL.Migrations
{
    [DbContext(typeof(MyContext))]
    [Migration("20240708133025_Unite")]
    partial class Unite
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ConcurrencyStamp = "d6a3cc96-e943-455e-b756-209fffe2239b",
                            Name = "Manager",
                            NormalizedName = "MANAGER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            RoleId = 1
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Project.ENTITIES.Models.AppUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "2c3839d9-4c9f-45c0-980a-6d1d11db0234",
                            CreatedDate = new DateTime(2024, 7, 8, 16, 30, 23, 981, DateTimeKind.Local).AddTicks(6735),
                            Email = "dilibalcihan@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "DILIBALCIHAN@GMAIL.COM",
                            NormalizedUserName = "CIHAN",
                            PasswordHash = "AQAAAAIAAYagAAAAEMVvsRgKp11h27k4SbbIV2AJnxgmUVSwukR7ZAX+n1LTAgIS6+LPV94sXA3cJ7QRbQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "59d23f99-fe90-43f7-90e0-84dacedbfe2e",
                            Status = 1,
                            TwoFactorEnabled = false,
                            UserName = "cihan"
                        });
                });

            modelBuilder.Entity("Project.ENTITIES.Models.Category", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            CategoryName = "Books",
                            CreatedDate = new DateTime(2024, 7, 8, 16, 30, 23, 981, DateTimeKind.Local).AddTicks(2317),
                            Description = "Veritatis adipisci accusantium in voluptatem totam quia quam suscipit sit.",
                            Status = 1
                        },
                        new
                        {
                            ID = 2,
                            CategoryName = "Outdoors",
                            CreatedDate = new DateTime(2024, 7, 8, 16, 30, 23, 981, DateTimeKind.Local).AddTicks(2923),
                            Description = "Consequuntur adanaya patlıcan sokaklarda ışık vel in quaerat ipsam voluptatem.",
                            Status = 1
                        },
                        new
                        {
                            ID = 3,
                            CategoryName = "Books",
                            CreatedDate = new DateTime(2024, 7, 8, 16, 30, 23, 981, DateTimeKind.Local).AddTicks(3082),
                            Description = "Blanditiis consequuntur ipsum oldular sed okuma sit ama mıknatıslı şafak.",
                            Status = 1
                        },
                        new
                        {
                            ID = 4,
                            CategoryName = "Music",
                            CreatedDate = new DateTime(2024, 7, 8, 16, 30, 23, 981, DateTimeKind.Local).AddTicks(3231),
                            Description = "Ve layıkıyla minima layıkıyla nemo makinesi magni enim okuma gördüm.",
                            Status = 1
                        },
                        new
                        {
                            ID = 5,
                            CategoryName = "Games",
                            CreatedDate = new DateTime(2024, 7, 8, 16, 30, 23, 981, DateTimeKind.Local).AddTicks(3381),
                            Description = "Qui sayfası laudantium blanditiis quaerat koyun ki quis non dolore.",
                            Status = 1
                        },
                        new
                        {
                            ID = 6,
                            CategoryName = "Shoes",
                            CreatedDate = new DateTime(2024, 7, 8, 16, 30, 23, 981, DateTimeKind.Local).AddTicks(3579),
                            Description = "Quia consequatur sit et ki amet modi quia enim bilgiyasayarı.",
                            Status = 1
                        },
                        new
                        {
                            ID = 7,
                            CategoryName = "Books",
                            CreatedDate = new DateTime(2024, 7, 8, 16, 30, 23, 981, DateTimeKind.Local).AddTicks(3735),
                            Description = "Beğendim sıla modi oldular öyle camisi aut totam kapının consequatur.",
                            Status = 1
                        },
                        new
                        {
                            ID = 8,
                            CategoryName = "Books",
                            CreatedDate = new DateTime(2024, 7, 8, 16, 30, 23, 981, DateTimeKind.Local).AddTicks(3879),
                            Description = "Qui explicabo aperiam beğendim corporis qui eum vitae tv cesurca.",
                            Status = 1
                        },
                        new
                        {
                            ID = 9,
                            CategoryName = "Clothing",
                            CreatedDate = new DateTime(2024, 7, 8, 16, 30, 23, 981, DateTimeKind.Local).AddTicks(4029),
                            Description = "Telefonu masanın ea ea qui veritatis duyulmamış düşünüyor gül voluptatem.",
                            Status = 1
                        },
                        new
                        {
                            ID = 10,
                            CategoryName = "Games",
                            CreatedDate = new DateTime(2024, 7, 8, 16, 30, 23, 981, DateTimeKind.Local).AddTicks(4298),
                            Description = "Aspernatur ducimus exercitationem esse voluptate yapacakmış gül adipisci laudantium sit.",
                            Status = 1
                        });
                });

            modelBuilder.Entity("Project.ENTITIES.Models.Customer", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MobilePhone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("Project.ENTITIES.Models.Employee", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Duty")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MobilePhone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("OffNumber")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.ToTable("Employees");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            Address = "Uskudar",
                            CreatedDate = new DateTime(2024, 7, 8, 16, 30, 24, 90, DateTimeKind.Local).AddTicks(3621),
                            Duty = "Garson",
                            FirstName = "Batuhan",
                            LastName = "Dilibal",
                            MobilePhone = "0435 769 56 93",
                            OffNumber = 3,
                            Status = 1
                        },
                        new
                        {
                            ID = 2,
                            Address = "Uskudar",
                            CreatedDate = new DateTime(2024, 7, 8, 16, 30, 24, 90, DateTimeKind.Local).AddTicks(3647),
                            Duty = "Garson",
                            FirstName = "Batuhan",
                            LastName = "Dilibal",
                            MobilePhone = "0435 769 56 93",
                            OffNumber = 3,
                            Status = 1
                        },
                        new
                        {
                            ID = 3,
                            Address = "Uskudar",
                            CreatedDate = new DateTime(2024, 7, 8, 16, 30, 24, 90, DateTimeKind.Local).AddTicks(3649),
                            Duty = "Garson",
                            FirstName = "Batuhan",
                            LastName = "Dilibal",
                            MobilePhone = "0435 769 56 93",
                            OffNumber = 3,
                            Status = 1
                        },
                        new
                        {
                            ID = 4,
                            Address = "Uskudar",
                            CreatedDate = new DateTime(2024, 7, 8, 16, 30, 24, 90, DateTimeKind.Local).AddTicks(3650),
                            Duty = "Garson",
                            FirstName = "Batuhan",
                            LastName = "Dilibal",
                            MobilePhone = "0435 769 56 93",
                            OffNumber = 3,
                            Status = 1
                        },
                        new
                        {
                            ID = 5,
                            Address = "Uskudar",
                            CreatedDate = new DateTime(2024, 7, 8, 16, 30, 24, 90, DateTimeKind.Local).AddTicks(3651),
                            Duty = "Garson",
                            FirstName = "Batuhan",
                            LastName = "Dilibal",
                            MobilePhone = "0435 769 56 93",
                            OffNumber = 3,
                            Status = 1
                        },
                        new
                        {
                            ID = 6,
                            Address = "Uskudar",
                            CreatedDate = new DateTime(2024, 7, 8, 16, 30, 24, 90, DateTimeKind.Local).AddTicks(3662),
                            Duty = "Garson",
                            FirstName = "Batuhan",
                            LastName = "Dilibal",
                            MobilePhone = "0435 769 56 93",
                            OffNumber = 3,
                            Status = 1
                        },
                        new
                        {
                            ID = 7,
                            Address = "Uskudar",
                            CreatedDate = new DateTime(2024, 7, 8, 16, 30, 24, 90, DateTimeKind.Local).AddTicks(3757),
                            Duty = "Garson",
                            FirstName = "Batuhan",
                            LastName = "Dilibal",
                            MobilePhone = "0435 769 56 93",
                            OffNumber = 3,
                            Status = 1
                        },
                        new
                        {
                            ID = 8,
                            Address = "Uskudar",
                            CreatedDate = new DateTime(2024, 7, 8, 16, 30, 24, 90, DateTimeKind.Local).AddTicks(3758),
                            Duty = "Garson",
                            FirstName = "Batuhan",
                            LastName = "Dilibal",
                            MobilePhone = "0435 769 56 93",
                            OffNumber = 3,
                            Status = 1
                        },
                        new
                        {
                            ID = 9,
                            Address = "Uskudar",
                            CreatedDate = new DateTime(2024, 7, 8, 16, 30, 24, 90, DateTimeKind.Local).AddTicks(3760),
                            Duty = "Garson",
                            FirstName = "Batuhan",
                            LastName = "Dilibal",
                            MobilePhone = "0435 769 56 93",
                            OffNumber = 3,
                            Status = 1
                        },
                        new
                        {
                            ID = 10,
                            Address = "Uskudar",
                            CreatedDate = new DateTime(2024, 7, 8, 16, 30, 24, 90, DateTimeKind.Local).AddTicks(3763),
                            Duty = "Garson",
                            FirstName = "Batuhan",
                            LastName = "Dilibal",
                            MobilePhone = "0435 769 56 93",
                            OffNumber = 3,
                            Status = 1
                        });
                });

            modelBuilder.Entity("Project.ENTITIES.Models.Ingredient", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("PredictedAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Unit")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("money");

                    b.HasKey("ID");

                    b.ToTable("Ingredients");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            Amount = 10m,
                            CreatedDate = new DateTime(2024, 7, 8, 16, 30, 23, 981, DateTimeKind.Local).AddTicks(6043),
                            Name = "Patates",
                            PredictedAmount = 9m,
                            Status = 1,
                            Unit = "kg",
                            UnitPrice = 15m
                        },
                        new
                        {
                            ID = 2,
                            Amount = 10m,
                            CreatedDate = new DateTime(2024, 7, 8, 16, 30, 23, 981, DateTimeKind.Local).AddTicks(6053),
                            Name = "Patates",
                            PredictedAmount = 9m,
                            Status = 1,
                            Unit = "kg",
                            UnitPrice = 15m
                        },
                        new
                        {
                            ID = 3,
                            Amount = 10m,
                            CreatedDate = new DateTime(2024, 7, 8, 16, 30, 23, 981, DateTimeKind.Local).AddTicks(6055),
                            Name = "Patates",
                            PredictedAmount = 9m,
                            Status = 1,
                            Unit = "kg",
                            UnitPrice = 15m
                        },
                        new
                        {
                            ID = 4,
                            Amount = 10m,
                            CreatedDate = new DateTime(2024, 7, 8, 16, 30, 23, 981, DateTimeKind.Local).AddTicks(6125),
                            Name = "Patates",
                            PredictedAmount = 9m,
                            Status = 1,
                            Unit = "kg",
                            UnitPrice = 15m
                        },
                        new
                        {
                            ID = 5,
                            Amount = 10m,
                            CreatedDate = new DateTime(2024, 7, 8, 16, 30, 23, 981, DateTimeKind.Local).AddTicks(6128),
                            Name = "Patates",
                            PredictedAmount = 9m,
                            Status = 1,
                            Unit = "kg",
                            UnitPrice = 15m
                        },
                        new
                        {
                            ID = 6,
                            Amount = 10m,
                            CreatedDate = new DateTime(2024, 7, 8, 16, 30, 23, 981, DateTimeKind.Local).AddTicks(6132),
                            Name = "Patates",
                            PredictedAmount = 9m,
                            Status = 1,
                            Unit = "kg",
                            UnitPrice = 15m
                        },
                        new
                        {
                            ID = 7,
                            Amount = 10m,
                            CreatedDate = new DateTime(2024, 7, 8, 16, 30, 23, 981, DateTimeKind.Local).AddTicks(6134),
                            Name = "Patates",
                            PredictedAmount = 9m,
                            Status = 1,
                            Unit = "kg",
                            UnitPrice = 15m
                        },
                        new
                        {
                            ID = 8,
                            Amount = 10m,
                            CreatedDate = new DateTime(2024, 7, 8, 16, 30, 23, 981, DateTimeKind.Local).AddTicks(6136),
                            Name = "Patates",
                            PredictedAmount = 9m,
                            Status = 1,
                            Unit = "kg",
                            UnitPrice = 15m
                        },
                        new
                        {
                            ID = 9,
                            Amount = 10m,
                            CreatedDate = new DateTime(2024, 7, 8, 16, 30, 23, 981, DateTimeKind.Local).AddTicks(6138),
                            Name = "Patates",
                            PredictedAmount = 9m,
                            Status = 1,
                            Unit = "kg",
                            UnitPrice = 15m
                        },
                        new
                        {
                            ID = 10,
                            Amount = 10m,
                            CreatedDate = new DateTime(2024, 7, 8, 16, 30, 23, 981, DateTimeKind.Local).AddTicks(6141),
                            Name = "Patates",
                            PredictedAmount = 9m,
                            Status = 1,
                            Unit = "kg",
                            UnitPrice = 15m
                        });
                });

            modelBuilder.Entity("Project.ENTITIES.Models.Order", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("OrderTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("TableNo")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("Project.ENTITIES.Models.OrderDetail", b =>
                {
                    b.Property<int>("OrderID")
                        .HasColumnType("int");

                    b.Property<int>("ProductID")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Unit")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("money");

                    b.HasKey("OrderID", "ProductID");

                    b.HasIndex("ProductID");

                    b.ToTable("OrderDetails");
                });

            modelBuilder.Entity("Project.ENTITIES.Models.Payment", b =>
                {
                    b.Property<int>("ID")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PaymentMethod")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("money");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("Project.ENTITIES.Models.Product", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int?>("CategoryID")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Unit")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("money");

                    b.HasKey("ID");

                    b.HasIndex("CategoryID");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            CategoryID = 1,
                            CreatedDate = new DateTime(2024, 7, 8, 16, 30, 23, 981, DateTimeKind.Local).AddTicks(4598),
                            ProductName = "Handmade Steel Shirt",
                            Status = 1,
                            Unit = "Porsiyon",
                            UnitPrice = 18.50m
                        },
                        new
                        {
                            ID = 2,
                            CategoryID = 2,
                            CreatedDate = new DateTime(2024, 7, 8, 16, 30, 23, 981, DateTimeKind.Local).AddTicks(4861),
                            ProductName = "Gorgeous Rubber Mouse",
                            Status = 1,
                            Unit = "Porsiyon",
                            UnitPrice = 278.37m
                        },
                        new
                        {
                            ID = 3,
                            CategoryID = 3,
                            CreatedDate = new DateTime(2024, 7, 8, 16, 30, 23, 981, DateTimeKind.Local).AddTicks(4978),
                            ProductName = "Incredible Steel Table",
                            Status = 1,
                            Unit = "Porsiyon",
                            UnitPrice = 898.89m
                        },
                        new
                        {
                            ID = 4,
                            CategoryID = 4,
                            CreatedDate = new DateTime(2024, 7, 8, 16, 30, 23, 981, DateTimeKind.Local).AddTicks(5087),
                            ProductName = "Small Plastic Salad",
                            Status = 1,
                            Unit = "Porsiyon",
                            UnitPrice = 801.83m
                        },
                        new
                        {
                            ID = 5,
                            CategoryID = 5,
                            CreatedDate = new DateTime(2024, 7, 8, 16, 30, 23, 981, DateTimeKind.Local).AddTicks(5196),
                            ProductName = "Small Granite Pants",
                            Status = 1,
                            Unit = "Porsiyon",
                            UnitPrice = 120.50m
                        },
                        new
                        {
                            ID = 6,
                            CategoryID = 6,
                            CreatedDate = new DateTime(2024, 7, 8, 16, 30, 23, 981, DateTimeKind.Local).AddTicks(5412),
                            ProductName = "Unbranded Plastic Gloves",
                            Status = 1,
                            Unit = "Porsiyon",
                            UnitPrice = 573.88m
                        },
                        new
                        {
                            ID = 7,
                            CategoryID = 7,
                            CreatedDate = new DateTime(2024, 7, 8, 16, 30, 23, 981, DateTimeKind.Local).AddTicks(5521),
                            ProductName = "Tasty Cotton Sausages",
                            Status = 1,
                            Unit = "Porsiyon",
                            UnitPrice = 605.24m
                        },
                        new
                        {
                            ID = 8,
                            CategoryID = 8,
                            CreatedDate = new DateTime(2024, 7, 8, 16, 30, 23, 981, DateTimeKind.Local).AddTicks(5630),
                            ProductName = "Licensed Fresh Mouse",
                            Status = 1,
                            Unit = "Porsiyon",
                            UnitPrice = 910.37m
                        },
                        new
                        {
                            ID = 9,
                            CategoryID = 9,
                            CreatedDate = new DateTime(2024, 7, 8, 16, 30, 23, 981, DateTimeKind.Local).AddTicks(5739),
                            ProductName = "Ergonomic Cotton Sausages",
                            Status = 1,
                            Unit = "Porsiyon",
                            UnitPrice = 810.09m
                        },
                        new
                        {
                            ID = 10,
                            CategoryID = 10,
                            CreatedDate = new DateTime(2024, 7, 8, 16, 30, 23, 981, DateTimeKind.Local).AddTicks(5848),
                            ProductName = "Incredible Fresh Table",
                            Status = 1,
                            Unit = "Porsiyon",
                            UnitPrice = 381.84m
                        });
                });

            modelBuilder.Entity("Project.ENTITIES.Models.Recipe", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.ToTable("Recipes");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            CreatedDate = new DateTime(2024, 7, 8, 16, 30, 23, 981, DateTimeKind.Local).AddTicks(6211),
                            Name = "Filtre Kahve",
                            Status = 1
                        },
                        new
                        {
                            ID = 2,
                            CreatedDate = new DateTime(2024, 7, 8, 16, 30, 23, 981, DateTimeKind.Local).AddTicks(6215),
                            Name = "Filtre Kahve",
                            Status = 1
                        },
                        new
                        {
                            ID = 3,
                            CreatedDate = new DateTime(2024, 7, 8, 16, 30, 23, 981, DateTimeKind.Local).AddTicks(6216),
                            Name = "Filtre Kahve",
                            Status = 1
                        },
                        new
                        {
                            ID = 4,
                            CreatedDate = new DateTime(2024, 7, 8, 16, 30, 23, 981, DateTimeKind.Local).AddTicks(6218),
                            Name = "Filtre Kahve",
                            Status = 1
                        },
                        new
                        {
                            ID = 5,
                            CreatedDate = new DateTime(2024, 7, 8, 16, 30, 23, 981, DateTimeKind.Local).AddTicks(6219),
                            Name = "Filtre Kahve",
                            Status = 1
                        },
                        new
                        {
                            ID = 6,
                            CreatedDate = new DateTime(2024, 7, 8, 16, 30, 23, 981, DateTimeKind.Local).AddTicks(6223),
                            Name = "Filtre Kahve",
                            Status = 1
                        },
                        new
                        {
                            ID = 7,
                            CreatedDate = new DateTime(2024, 7, 8, 16, 30, 23, 981, DateTimeKind.Local).AddTicks(6224),
                            Name = "Filtre Kahve",
                            Status = 1
                        },
                        new
                        {
                            ID = 8,
                            CreatedDate = new DateTime(2024, 7, 8, 16, 30, 23, 981, DateTimeKind.Local).AddTicks(6226),
                            Name = "Filtre Kahve",
                            Status = 1
                        },
                        new
                        {
                            ID = 9,
                            CreatedDate = new DateTime(2024, 7, 8, 16, 30, 23, 981, DateTimeKind.Local).AddTicks(6227),
                            Name = "Filtre Kahve",
                            Status = 1
                        },
                        new
                        {
                            ID = 10,
                            CreatedDate = new DateTime(2024, 7, 8, 16, 30, 23, 981, DateTimeKind.Local).AddTicks(6230),
                            Name = "Filtre Kahve",
                            Status = 1
                        });
                });

            modelBuilder.Entity("Project.ENTITIES.Models.RecipeDetail", b =>
                {
                    b.Property<int>("IngredientID")
                        .HasColumnType("int");

                    b.Property<int>("RecipeID")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("IngredientQuantity")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Instruction")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Unit")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IngredientID", "RecipeID");

                    b.HasIndex("RecipeID");

                    b.ToTable("RecipeDetails");

                    b.HasData(
                        new
                        {
                            IngredientID = 1,
                            RecipeID = 1,
                            CreatedDate = new DateTime(2024, 7, 8, 16, 30, 23, 981, DateTimeKind.Local).AddTicks(6288),
                            IngredientQuantity = 3m,
                            Instruction = "Karıstır",
                            Status = 1,
                            Unit = "Adet"
                        },
                        new
                        {
                            IngredientID = 2,
                            RecipeID = 2,
                            CreatedDate = new DateTime(2024, 7, 8, 16, 30, 23, 981, DateTimeKind.Local).AddTicks(6293),
                            IngredientQuantity = 3m,
                            Instruction = "Karıstır",
                            Status = 1,
                            Unit = "Adet"
                        },
                        new
                        {
                            IngredientID = 3,
                            RecipeID = 3,
                            CreatedDate = new DateTime(2024, 7, 8, 16, 30, 23, 981, DateTimeKind.Local).AddTicks(6295),
                            IngredientQuantity = 3m,
                            Instruction = "Karıstır",
                            Status = 1,
                            Unit = "Adet"
                        },
                        new
                        {
                            IngredientID = 4,
                            RecipeID = 4,
                            CreatedDate = new DateTime(2024, 7, 8, 16, 30, 23, 981, DateTimeKind.Local).AddTicks(6297),
                            IngredientQuantity = 3m,
                            Instruction = "Karıstır",
                            Status = 1,
                            Unit = "Adet"
                        },
                        new
                        {
                            IngredientID = 5,
                            RecipeID = 5,
                            CreatedDate = new DateTime(2024, 7, 8, 16, 30, 23, 981, DateTimeKind.Local).AddTicks(6299),
                            IngredientQuantity = 3m,
                            Instruction = "Karıstır",
                            Status = 1,
                            Unit = "Adet"
                        },
                        new
                        {
                            IngredientID = 6,
                            RecipeID = 6,
                            CreatedDate = new DateTime(2024, 7, 8, 16, 30, 23, 981, DateTimeKind.Local).AddTicks(6302),
                            IngredientQuantity = 3m,
                            Instruction = "Karıstır",
                            Status = 1,
                            Unit = "Adet"
                        },
                        new
                        {
                            IngredientID = 7,
                            RecipeID = 7,
                            CreatedDate = new DateTime(2024, 7, 8, 16, 30, 23, 981, DateTimeKind.Local).AddTicks(6304),
                            IngredientQuantity = 3m,
                            Instruction = "Karıstır",
                            Status = 1,
                            Unit = "Adet"
                        },
                        new
                        {
                            IngredientID = 8,
                            RecipeID = 8,
                            CreatedDate = new DateTime(2024, 7, 8, 16, 30, 23, 981, DateTimeKind.Local).AddTicks(6306),
                            IngredientQuantity = 3m,
                            Instruction = "Karıstır",
                            Status = 1,
                            Unit = "Adet"
                        },
                        new
                        {
                            IngredientID = 9,
                            RecipeID = 9,
                            CreatedDate = new DateTime(2024, 7, 8, 16, 30, 23, 981, DateTimeKind.Local).AddTicks(6307),
                            IngredientQuantity = 3m,
                            Instruction = "Karıstır",
                            Status = 1,
                            Unit = "Adet"
                        },
                        new
                        {
                            IngredientID = 10,
                            RecipeID = 10,
                            CreatedDate = new DateTime(2024, 7, 8, 16, 30, 23, 981, DateTimeKind.Local).AddTicks(6311),
                            IngredientQuantity = 3m,
                            Instruction = "Karıstır",
                            Status = 1,
                            Unit = "Adet"
                        });
                });

            modelBuilder.Entity("Project.ENTITIES.Models.Table", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TableNo")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.ToTable("Tables");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            CreatedDate = new DateTime(2024, 7, 8, 16, 30, 24, 90, DateTimeKind.Local).AddTicks(3851),
                            Status = "Bos",
                            TableNo = 1
                        },
                        new
                        {
                            ID = 2,
                            CreatedDate = new DateTime(2024, 7, 8, 16, 30, 24, 90, DateTimeKind.Local).AddTicks(3856),
                            Status = "Bos",
                            TableNo = 2
                        },
                        new
                        {
                            ID = 3,
                            CreatedDate = new DateTime(2024, 7, 8, 16, 30, 24, 90, DateTimeKind.Local).AddTicks(3858),
                            Status = "Bos",
                            TableNo = 3
                        },
                        new
                        {
                            ID = 4,
                            CreatedDate = new DateTime(2024, 7, 8, 16, 30, 24, 90, DateTimeKind.Local).AddTicks(3859),
                            Status = "Bos",
                            TableNo = 4
                        },
                        new
                        {
                            ID = 5,
                            CreatedDate = new DateTime(2024, 7, 8, 16, 30, 24, 90, DateTimeKind.Local).AddTicks(3860),
                            Status = "Bos",
                            TableNo = 5
                        },
                        new
                        {
                            ID = 6,
                            CreatedDate = new DateTime(2024, 7, 8, 16, 30, 24, 90, DateTimeKind.Local).AddTicks(3863),
                            Status = "Bos",
                            TableNo = 6
                        },
                        new
                        {
                            ID = 7,
                            CreatedDate = new DateTime(2024, 7, 8, 16, 30, 24, 90, DateTimeKind.Local).AddTicks(3864),
                            Status = "Bos",
                            TableNo = 7
                        },
                        new
                        {
                            ID = 8,
                            CreatedDate = new DateTime(2024, 7, 8, 16, 30, 24, 90, DateTimeKind.Local).AddTicks(3865),
                            Status = "Bos",
                            TableNo = 8
                        },
                        new
                        {
                            ID = 9,
                            CreatedDate = new DateTime(2024, 7, 8, 16, 30, 24, 90, DateTimeKind.Local).AddTicks(3866),
                            Status = "Bos",
                            TableNo = 9
                        },
                        new
                        {
                            ID = 10,
                            CreatedDate = new DateTime(2024, 7, 8, 16, 30, 24, 90, DateTimeKind.Local).AddTicks(3868),
                            Status = "Bos",
                            TableNo = 10
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("Project.ENTITIES.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("Project.ENTITIES.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Project.ENTITIES.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("Project.ENTITIES.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Project.ENTITIES.Models.OrderDetail", b =>
                {
                    b.HasOne("Project.ENTITIES.Models.Order", "Order")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Project.ENTITIES.Models.Product", "Product")
                        .WithMany("OrderDetails")
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Project.ENTITIES.Models.Payment", b =>
                {
                    b.HasOne("Project.ENTITIES.Models.Order", "Order")
                        .WithOne("Payment")
                        .HasForeignKey("Project.ENTITIES.Models.Payment", "ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");
                });

            modelBuilder.Entity("Project.ENTITIES.Models.Product", b =>
                {
                    b.HasOne("Project.ENTITIES.Models.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryID");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Project.ENTITIES.Models.RecipeDetail", b =>
                {
                    b.HasOne("Project.ENTITIES.Models.Ingredient", "Ingredient")
                        .WithMany("RecipeIngredients")
                        .HasForeignKey("IngredientID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Project.ENTITIES.Models.Recipe", "Recipe")
                        .WithMany("RecipeIngredients")
                        .HasForeignKey("RecipeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ingredient");

                    b.Navigation("Recipe");
                });

            modelBuilder.Entity("Project.ENTITIES.Models.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("Project.ENTITIES.Models.Ingredient", b =>
                {
                    b.Navigation("RecipeIngredients");
                });

            modelBuilder.Entity("Project.ENTITIES.Models.Order", b =>
                {
                    b.Navigation("OrderDetails");

                    b.Navigation("Payment")
                        .IsRequired();
                });

            modelBuilder.Entity("Project.ENTITIES.Models.Product", b =>
                {
                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("Project.ENTITIES.Models.Recipe", b =>
                {
                    b.Navigation("RecipeIngredients");
                });
#pragma warning restore 612, 618
        }
    }
}
